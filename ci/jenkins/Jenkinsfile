pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins
  containers:
  - name: builder
    image: python:3.11-slim
    tty: true
    command: ["/bin/bash", "-lc"]
    args: ["sleep infinity"]
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
    volumeMounts:
    - name: workspace
      mountPath: /home/jenkins/agent
  - name: dind
    image: docker:27-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
    volumeMounts:
    - name: docker-graph
      mountPath: /var/lib/docker
  volumes:
  - name: workspace
    emptyDir: {}
  - name: docker-graph
    emptyDir: {}
"""
    }
  }

  environment {
    DOCKERHUB_USER = 'ofirjean'
    DOCKER_IMAGE = 'mental_health_assistant'
    BASE_RELEASE = 'mha-release'
    BASE_NAMESPACE = 'mental-health'
  }

  stages {

    stage('Sanity & Setup') {
      steps {
        container('builder') {
          sh '''
          set -ex
          echo "üîß Builder container ready: $(uname -a)"
          sleep 5

          apt update -y
          apt install -y curl tar gzip bash git docker.io kubectl

          curl -fsSL https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz -o /tmp/helm.tar.gz
          tar -zxvf /tmp/helm.tar.gz -C /tmp/
          mv /tmp/linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          helm version --short
          kubectl version --client
          echo "‚úÖ Sanity check complete"
          '''
        }
      }
    }

    stage('Checkout') {
      steps {
        container('builder') {
          checkout scm
          sh 'git --no-pager log -1 --pretty=oneline || true'
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('builder') {
          sh '''
          pip3 install --upgrade pip
          pip3 install -r app/requirements.txt pytest
          mkdir -p test-reports
          pytest app/tests/test_sample.py -v --junitxml=test-reports/pytest.xml
          '''
        }
      }
      post {
        always {
          junit 'test-reports/pytest.xml'
        }
      }
    }

    stage('Helm Lint & Template') {
      steps {
        container('builder') {
          sh '''
          helm lint app/helm
          helm template ${BASE_RELEASE}-${BRANCH_NAME} app/helm --namespace ${BASE_NAMESPACE}-${BRANCH_NAME}
          '''
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        container('builder') {
          withCredentials([string(credentialsId: 'dockerhub-pass', variable: 'DH_PASS')]) {
            sh '''
            echo "$DH_PASS" | docker login -u ${DOCKERHUB_USER} --password-stdin
            docker build -t ${DOCKERHUB_USER}/${DOCKER_IMAGE}:${BRANCH_NAME}-${BUILD_NUMBER} -f app/Dockerfile app
            docker push ${DOCKERHUB_USER}/${DOCKER_IMAGE}:${BRANCH_NAME}-${BUILD_NUMBER}
            docker tag ${DOCKERHUB_USER}/${DOCKER_IMAGE}:${BRANCH_NAME}-${BUILD_NUMBER} ${DOCKERHUB_USER}/${DOCKER_IMAGE}:${BRANCH_NAME}-latest
            docker push ${DOCKERHUB_USER}/${DOCKER_IMAGE}:${BRANCH_NAME}-latest
            '''
          }
        }
      }
    }

    stage('Deploy with Helm') {
      steps {
        container('builder') {
          sh '''
          RANDOM_PORT=$((32000 + RANDOM % 2000))
          echo "üöÄ Deploying with NodePort ${RANDOM_PORT}"
          helm upgrade --install ${BASE_RELEASE}-${BRANCH_NAME} app/helm \
            --set image.repository=${DOCKERHUB_USER}/${DOCKER_IMAGE} \
            --set image.tag=${BRANCH_NAME}-${BUILD_NUMBER} \
            --set service.nodePort=${RANDOM_PORT} \
            --namespace ${BASE_NAMESPACE}-${BRANCH_NAME} \
            --create-namespace \
            --atomic --cleanup-on-fail
          '''
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        container('builder') {
          sh '''
          kubectl rollout status deployment/flask-app -n ${BASE_NAMESPACE}-${BRANCH_NAME} --timeout=120s
          kubectl get svc -n ${BASE_NAMESPACE}-${BRANCH_NAME}
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Pipeline succeeded"
      emailext(
        to: 'ofirjean11@gmail.com',
        subject: "[MHA] ‚úÖ Build #${env.BUILD_NUMBER} passed (${env.BRANCH_NAME})",
        body: "Helm deployment succeeded.\nBuild URL: ${env.BUILD_URL}",
        mimeType: 'text/plain'
      )
    }
    failure {
      echo "‚ùå Pipeline failed"
      emailext(
        to: 'ofirjean11@gmail.com',
        subject: "[MHA] ‚ùå Build #${env.BUILD_NUMBER} failed (${env.BRANCH_NAME})",
        body: "Check console output: ${env.BUILD_URL}",
        attachLog: true,
        compressLog: true,
        mimeType: 'text/plain'
      )
    }
  }
}
