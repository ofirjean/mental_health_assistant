pipeline {
  agent {
    kubernetes {
      yamlFile 'ci/jenkins/build-agents.yaml'
      defaultContainer 'builder'
    }
  }

  environment {
    DOCKERHUB_CREDENTIALS = credentials('DockerHub')
    DISCORD_WEBHOOK       = credentials('discord-webhook')
    DOCKERHUB_REPO        = 'ofirjean/mental_health_assistant'
    BASE_RELEASE          = 'mha-release'
    BASE_NAMESPACE        = 'mental-health'
  }

  stages {

    stage('Checkout') {
      steps {
        container('builder') {
          checkout scm
          sh '''
            set -e
            echo "✅ Checked out branch: ${BRANCH_NAME:-unknown}"
            echo "Commit: ${GIT_COMMIT:-unknown}"
          '''
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('builder') {
          sh '''
            set -e
            python3 --version
            pip3 install --upgrade pip
            pip3 install -r app/requirements.txt pytest
            PYTHONPATH=. pytest app/tests/test_sample.py -v --maxfail=1 --disable-warnings
          '''
        }
      }
    }

    stage('Helm Lint & Template') {
      steps {
        container('builder') {
          sh '''
            set -e
            helm lint app/helm/
            helm template ${BASE_RELEASE}-${BRANCH_NAME} app/helm/ --namespace ${BASE_NAMESPACE}-${BRANCH_NAME}
          '''
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        container('builder') {
          withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
            sh '''
              set -e
              docker build -t ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-${BUILD_NUMBER} -f app/Dockerfile .
              docker tag ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-${BUILD_NUMBER} ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-latest
              echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
              docker push ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-${BUILD_NUMBER}
              docker push ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-latest
            '''
          }
        }
      }
    }

    stage('Deploy with Helm (per branch)') {
      steps {
        container('builder') {
          sh '''
            set -e
            helm upgrade --install ${BASE_RELEASE}-${BRANCH_NAME} app/helm/ \
              --set image.repository=${DOCKERHUB_REPO} \
              --set image.tag=${BRANCH_NAME}-${BUILD_NUMBER} \
              --namespace ${BASE_NAMESPACE}-${BRANCH_NAME} \
              --create-namespace \
              --atomic --cleanup-on-fail
          '''
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        container('builder') {
          sh '''
            set -e
            kubectl -n ${BASE_NAMESPACE}-${BRANCH_NAME} rollout status deployment/flask-app --timeout=90s
            kubectl -n ${BASE_NAMESPACE}-${BRANCH_NAME} get pods
            kubectl -n ${BASE_NAMESPACE}-${BRANCH_NAME} get svc
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Pipeline succeeded for branch ${BRANCH_NAME}!"
    }

    failure {
      echo "❌ Pipeline failed for branch ${BRANCH_NAME}!"
      script {
        if (env.DISCORD_WEBHOOK) {
          def message = [
            content: "❌ Pipeline FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) - ${env.BUILD_URL}"
          ]
          httpRequest acceptType: 'APPLICATION_JSON',
                      contentType: 'APPLICATION_JSON',
                      httpMode: 'POST',
                      requestBody: groovy.json.JsonOutput.toJson(message),
                      url: env.DISCORD_WEBHOOK,
                      validResponseCodes: '200:204'
        }
      }
      emailext(
        to: 'ofirjean11@gmail.com',
        subject: "❌ Jenkins Pipeline FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BRANCH_NAME})",
        body: """<p>The pipeline failed for branch <b>${env.BRANCH_NAME}</b>.</p>
                 <p>Job: ${env.JOB_NAME}<br/>
                 Build: <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>"""
      )
    }
  }
}
