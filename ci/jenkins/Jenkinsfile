pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins
  containers:
  - name: builder
    image: python:3.11-alpine
    command:
    - /bin/sh
    - -lc
    args:
    - sleep infinity
    tty: true
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
    volumeMounts:
    - name: shared-workspace
      mountPath: /home/jenkins/agent
  - name: dind
    image: docker:27-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
    volumeMounts:
    - name: shared-workspace
      mountPath: /var/lib/docker
  - name: jnlp
    image: jenkins/inbound-agent:3341.v0766d82b_dec0-1
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
    volumeMounts:
    - name: shared-workspace
      mountPath: /home/jenkins/agent
  volumes:
  - name: shared-workspace
    emptyDir: {}
"""
    }
  }

  environment {
    IMAGE_REPO = "ofirjean/mental-health-assistant"
    BRANCH_NAME = "${env.BRANCH_NAME ?: 'main'}"
  }

  stages {
    stage('Sanity & Setup') {
      steps {
        container('builder') {
          sh '''
            set -ex
            chown -R 1000:1000 /home/jenkins/agent || true
            echo "üåç Environment Info"
            apk add --no-cache git docker-cli bash coreutils curl tar gzip kubectl
          '''
        }
      }
    }

    stage('Helm Lint & Template') {
      steps {
        container('builder') {
          sh '''
            wget -q https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz
            tar -zxf helm-v3.15.2-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            chmod +x /usr/local/bin/helm

            helm lint app/helm
            helm template app/helm
          '''
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        container('builder') {
          sh '''
            docker build -t $IMAGE_REPO:$BRANCH_NAME .
            echo "‚úÖ Image built (push skipped)"
          '''
        }
      }
    }

    stage('Deploy with Helm') {
      steps {
        container('builder') {
          sh '''
            helm upgrade --install mental-health-app ./app/helm -n mental-health --create-namespace --atomic
          '''
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        container('builder') {
          sh '''
            kubectl -n mental-health rollout status deploy/flask-app
            kubectl -n mental-health get pods
          '''
        }
      }
    }
  }

  post {
    success {
      mail to: 'ofirjean11@gmail.com',
           subject: "‚úÖ Jenkins Pipeline Succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
           body: "Pipeline completed successfully!"
    }
    failure {
      mail to: 'ofirjean11@gmail.com',
           subject: "‚ùå Jenkins Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
           body: "Pipeline failed ‚Äî check Jenkins logs."
    }
  }
}
