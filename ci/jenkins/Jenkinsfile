pipeline {
  agent {
    kubernetes {
      yamlFile 'ci/jenkins/build-agents.yaml'
      defaultContainer 'builder'
    }
  }

  environment {
    DOCKERHUB_CREDENTIALS = credentials('DockerHub')
    DISCORD_WEBHOOK = credentials('DiscordWebhook')
  }

  stages {
    stage('Checkout') {
      steps {
        container('builder') {
          checkout scm
          sh '''
            set -e
            echo "Branch: ${BRANCH_NAME}"
            echo "Commit: ${GIT_COMMIT}"
            ls -la
          '''
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('builder') {
          sh '''
            set -e
            python3 --version
            pip3 install --upgrade pip
            pip3 install -r app/requirements.txt pytest
            PYTHONPATH=. pytest app/tests/test_sample.py -v --maxfail=1 --disable-warnings
          '''
        }
      }
    }

    stage('Helm Lint & Template') {
      steps {
        container('builder') {
          sh '''
            set -e
            helm version
            helm lint app/helm/
            helm template mha-release app/helm/ --namespace default
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('builder') {
          withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
            sh '''
              set -e
              docker --version
              docker build -t ${DH_USER}/mental_health_assistant:${BUILD_NUMBER} -f app/Dockerfile .
              echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
              docker push ${DH_USER}/mental_health_assistant:${BUILD_NUMBER}
            '''
          }
        }
      }
    }

    stage('Helm Package & Push (main only)') {
      when { branch 'main' }
      steps {
        container('builder') {
          withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
            sh '''
              set -e
              helm package app/helm/ -d .

              # ✅ Non-interactive Helm registry login
              helm registry login registry-1.docker.io \
                --username "${DOCKERHUB_CREDENTIALS_USR}" \
                --password "${DOCKERHUB_CREDENTIALS_PSW}"

              CHART_TGZ=$(ls ./*.tgz | head -n1)
              helm push "${CHART_TGZ}" oci://registry-1.docker.io/${DOCKERHUB_CREDENTIALS_USR}
            '''
          }
        }
      }
    }

    stage('Deploy with Helm (main only)') {
      when { branch 'main' }
      steps {
        container('builder') {
          sh '''
            set -e
            helm upgrade --install mental-health-app app/helm/ \
              -n mental-health \
              -f app/helm/values.yaml \
              --set image.tag=${BUILD_NUMBER} \
              --atomic --cleanup-on-fail
          '''
        }
      }
    }

    stage('Verify Deployment (main only)') {
      when { branch 'main' }
      steps {
        container('builder') {
          sh '''
            kubectl -n mental-health rollout status deployment/flask-app --timeout=90s
            kubectl -n mental-health get pods
            kubectl -n mental-health get svc
          '''
        }
      }
    }
  }

  post {
    success {
      echo "Pipeline succeeded ✅"
    }
    failure {
      echo "Pipeline failed ❌"
      sh '''
        if [ -n "${DISCORD_WEBHOOK}" ]; then
          curl -sS -H 'Content-Type: application/json' \
          -X POST -d '{"content": "❌ Pipeline FAILED: multipipe/${BRANCH_NAME} #${BUILD_NUMBER} - http://jenkins:8080/job/multipipe/job/${BRANCH_NAME}/${BUILD_NUMBER}/"}' "${DISCORD_WEBHOOK}"
        fi
      '''
      emailext to: 'ofirjean11@gmail.com',
               subject: "❌ Jenkins Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
               body: "Check the build log: ${env.BUILD_URL}"
    }
  }
}
