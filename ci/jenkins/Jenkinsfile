pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins
  securityContext:
    fsGroup: 1000
  volumes:
    - name: workspace
      emptyDir: {}
    - name: docker-graph
      emptyDir: {}
  containers:
    - name: jnlp
      image: jenkins/inbound-agent:latest-jdk17
      volumeMounts:
        - name: workspace
          mountPath: /home/jenkins/agent

    - name: builder
      image: python:3.11-alpine
      command: ["/bin/sh","-lc"]
      args:
        - |
          set -ex
          apk update
          apk add --no-cache git docker-cli bash coreutils curl tar kubectl
          # Install Helm cleanly
          curl -fsSL https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz -o /tmp/helm.tar.gz
          tar -zxvf /tmp/helm.tar.gz -C /tmp
          mv /tmp/linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          helm version
          echo "✅ builder ready"
          sleep infinity
      env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
      tty: true
      volumeMounts:
        - name: workspace
          mountPath: /home/jenkins/agent

    - name: dind
      image: docker:27-dind
      securityContext:
        privileged: true
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
      args:
        - --host=tcp://0.0.0.0:2375
        - --storage-driver=overlay2
      volumeMounts:
        - name: docker-graph
          mountPath: /var/lib/docker
      """
      defaultContainer 'builder'
      idleMinutes 5
    }
  }

  options {
    timestamps()
    ansiColor('xterm')
    skipDefaultCheckout(true)
    disableConcurrentBuilds()
  }

  environment {
    DOCKERHUB_REPO   = 'ofirjean/mental_health_assistant'
    BASE_RELEASE     = 'mha-release'
    BASE_NAMESPACE   = 'mental-health'
    DISCORD_WEBHOOK  = credentials('discord-webhook') // optional
  }

  stages {
    stage('Sanity') {
      steps {
        container('builder') {
          sh 'echo "Hello from $(uname -a)"; helm version; kubectl version --client; docker version || true'
        }
      }
    }

    stage('Checkout') {
      steps {
        container('builder') {
          checkout scm
          sh '''
            set -e
            echo "✅ Checked out ${BRANCH_NAME:-unknown}"
            git --no-pager log -1 --pretty=oneline || true
          '''
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('builder') {
          sh '''
            set -e
            python3 --version
            pip3 install --upgrade pip
            pip3 install -r app/requirements.txt pytest
            mkdir -p test-reports
            PYTHONPATH=. pytest app/tests/test_sample.py -v --maxfail=1 --disable-warnings --junitxml=test-reports/pytest.xml
          '''
        }
      }
      post { always { junit allowEmptyResults: true, testResults: 'test-reports/pytest.xml' } }
    }

    stage('Helm Lint & Template') {
      steps {
        container('builder') {
          sh '''
            set -e
            helm lint app/helm
            helm template ${BASE_RELEASE}-${BRANCH_NAME} app/helm --namespace ${BASE_NAMESPACE}-${BRANCH_NAME} >/dev/null
          '''
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        container('builder') {
          withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
            sh '''
              set -e
              echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
              docker build -t ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-${BUILD_NUMBER} -f app/Dockerfile app
              docker tag ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-${BUILD_NUMBER} ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-latest
              docker push ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-${BUILD_NUMBER}
              docker push ${DH_USER}/mental_health_assistant:${BRANCH_NAME}-latest
            '''
          }
        }
      }
    }

    stage('Deploy with Helm (per branch)') {
      steps {
        container('builder') {
          sh '''
            set -e
            helm upgrade --install ${BASE_RELEASE}-${BRANCH_NAME} app/helm \
              --set image.repository=${DOCKERHUB_REPO} \
              --set image.tag=${BRANCH_NAME}-${BUILD_NUMBER} \
              --namespace ${BASE_NAMESPACE}-${BRANCH_NAME} \
              --create-namespace \
              --atomic --cleanup-on-fail
          '''
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        container('builder') {
          sh '''
            set -e
            kubectl -n ${BASE_NAMESPACE}-${BRANCH_NAME} rollout status deployment/flask-app --timeout=120s
            kubectl -n ${BASE_NAMESPACE}-${BRANCH_NAME} get pods -o wide
            kubectl -n ${BASE_NAMESPACE}-${BRANCH_NAME} get svc
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Pipeline succeeded for ${BRANCH_NAME}"
      emailext(
        to: 'ofirjean11@gmail.com',
        subject: "[MHA] ✅ Build #${env.BUILD_NUMBER} passed (${env.BRANCH_NAME})",
        body: "All stages completed.\\nImage: ${env.DOCKERHUB_REPO}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}\\n${env.BUILD_URL}",
        mimeType: 'text/plain'
      )
    }
    failure {
      echo "❌ Pipeline failed for ${BRANCH_NAME}"
      script {
        if (env.DISCORD_WEBHOOK) {
          def message = [content: "❌ Pipeline FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) - ${env.BUILD_URL}"]
          httpRequest acceptType: 'APPLICATION_JSON',
                      contentType: 'APPLICATION_JSON',
                      httpMode: 'POST',
                      requestBody: groovy.json.JsonOutput.toJson(message),
                      url: env.DISCORD_WEBHOOK,
                      validResponseCodes: '200:204'
        }
      }
      emailext(
        to: 'ofirjean11@gmail.com',
        subject: "[MHA] ❌ Build #${env.BUILD_NUMBER} failed (${env.BRANCH_NAME})",
        body: """Job: ${env.JOB_NAME}
Build: ${env.BUILD_URL}
Branch: ${env.BRANCH_NAME}

Please check the console log for details.""",
        attachLog: true,
        compressLog: true,
        mimeType: 'text/plain'
      )
    }
  }
}
