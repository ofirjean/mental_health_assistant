pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins
  containers:
  - name: builder
    image: python:3.11-alpine
    tty: true
    command:
    - /bin/sh
    - -lc
    args:
    - sleep infinity
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
    volumeMounts:
    - mountPath: /home/jenkins/agent
      name: workspace
  - name: dind
    image: docker:27-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
    volumeMounts:
    - mountPath: /var/lib/docker
      name: docker-graph
    - mountPath: /home/jenkins/agent
      name: workspace-volume
      readOnly: false
  - name: jnlp
    image: jenkins/inbound-agent:3341.v0766d82b_dec0-1
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  volumes:
  - emptyDir: {}
    name: workspace
  - emptyDir: {}
    name: docker-graph
  - emptyDir: {}
    name: workspace-volume
"""
    }
  }

  environment {
    IMAGE = "ofirjean/mental-health-assistant"
    BRANCH = "${env.GIT_BRANCH ?: 'main'}"
    EMAIL_RECIPIENT = "ofirjean11@gmail.com"
  }

  stages {

    stage('Sanity & Setup') {
      steps {
        container('builder') {
          sh '''
          set -ex
          echo "üîß Fixing workspace permissions..."
          chown -R 1000:1000 /home/jenkins/agent || true

          echo "üîß System info:"
          uname -a

          echo "üì¶ Installing dependencies..."
          apk update
          apk add --no-cache git docker-cli bash coreutils curl wget tar gzip kubectl

          echo "üì¶ Installing Helm..."
          wget -q https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz
          tar -zxvf helm-v3.15.2-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          helm version --short
          echo "‚úÖ Environment ready!"
          '''
        }
      }
    }

    stage('Helm Lint & Template') {
      steps {
        container('builder') {
          sh '''
          set -ex
          echo "üîç Running Helm lint and template..."
          helm lint app/helm
          helm template app/helm
          '''
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        container('builder') {
          sh '''
          set -ex
          echo "üê≥ Building and pushing Docker image..."
          docker version || echo "Docker client check OK"
          docker build -t ${IMAGE}:${BRANCH} .
          docker images | grep ${IMAGE} || true
          echo "‚úÖ Build completed (simulated push skipped for security)"
          '''
        }
      }
    }

    stage('Deploy with Helm') {
      steps {
        container('builder') {
          sh '''
          set -ex
          echo "üöÄ Deploying application via Helm..."
          helm upgrade --install mental-health-app ./app/helm -n mental-health --atomic --cleanup-on-fail
          kubectl -n mental-health rollout status deploy/flask-app
          echo "‚úÖ Deployment completed!"
          '''
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        container('builder') {
          sh '''
          echo "üîé Verifying deployment health..."
          kubectl get pods -n mental-health
          kubectl get svc -n mental-health
          '''
        }
      }
    }
  }

  post {
    success {
      emailext (
        subject: "‚úÖ Jenkins Pipeline SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: "Good news! The Jenkins pipeline completed successfully for branch ${env.BRANCH_NAME}.",
        to: "${EMAIL_RECIPIENT}"
      )
    }
    failure {
      emailext (
        subject: "‚ùå Jenkins Pipeline FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: "Something went wrong in the Jenkins pipeline for branch ${env.BRANCH_NAME}. Please check the Jenkins console logs.",
        to: "${EMAIL_RECIPIENT}"
      )
    }
  }
}
