pipeline {
  agent {
    kubernetes {
      label 'k8s-yaml'
      defaultContainer 'builder'
      idleMinutes 0
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins
  volumes:
    - name: workspace
      emptyDir: {}
    - name: docker-graph
      emptyDir: {}
  containers:
    - name: jnlp
      image: jenkins/inbound-agent:latest-jdk17
      volumeMounts:
        - name: workspace
          mountPath: /home/jenkins/agent
    - name: builder
      image: python:3.11-alpine
      command: ['sh','-c','cat']
      tty: true
      env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
      volumeMounts:
        - name: workspace
          mountPath: /home/jenkins/agent
    - name: dind
      image: docker:27-dind
      securityContext:
        privileged: true
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
      args:
        - --host=tcp://0.0.0.0:2375
        - --storage-driver=overlay2
      volumeMounts:
        - name: docker-graph
          mountPath: /var/lib/docker
"""
    }
  }

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '20'))
    overrideIndexTriggers(true) // allow triggers{} in multibranch
  }

  // Poll SCM every ~2 minutes (works in Multibranch thanks to overrideIndexTriggers)
  triggers {
    pollSCM('H/2 * * * *')
  }

  parameters {
    string(name: 'FORCE_TAG', defaultValue: '', description: 'Override image tag; leave empty to auto-generate on main')
  }

  environment {
    DOCKER_REPO     = 'ofirjean/mental-health-assistant'
    VALUES_FILE     = 'app/helm/values-prod.yaml'
    CRED_DOCKERHUB  = 'DockerHub'   // Jenkins cred ID (Username + token)
    CRED_GITHUB_PAT = 'github-pat'  // Username + PAT
    CRED_GITLAB_PAT = 'gitlab-pat'  // Username + PAT
  }

  stages {
    stage('Checkout'){
      steps {
        checkout scm
        sh '''
          set -euo pipefail
          git config --add safe.directory "$PWD"
          git status -sb || true
        '''
      }
    }

    // Ensure docker CLI exists and DinD is ready
    stage('Install tools') {
      steps {
        sh '''
          set -euo pipefail
          # Install required tools
          apk update
          apk add --no-cache docker-cli git curl yq

          # Wait up to ~2 minutes for Docker daemon in the dind sidecar
          echo "Waiting for Docker daemon to be ready..."
          for i in $(seq 1 60); do
            if docker version >/dev/null 2>&1; then
              echo "Docker daemon is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Docker daemon failed to start after 2 minutes"
              exit 1
            fi
            echo "Waiting for Docker daemon (attempt $i/60)..."
            sleep 2
          done

          echo "Tool versions:"
          python --version
          docker version
          git --version
          yq --version
        '''
      }
    }

    stage('Sanity checks') {
      steps {
        sh '''
          set -euo pipefail
          echo "Branch: ${BRANCH_NAME}"
          echo "Workspace: $PWD"
          ls -la

          # Verify Docker is working
          docker info

          # Ensure values file exists
          if [ ! -f "$VALUES_FILE" ]; then
            echo "Error: Missing $VALUES_FILE"
            exit 1
          fi

          # Git details
          git remote -v
          echo "Current commit: $(git rev-parse HEAD)"
        '''
      }
    }

    stage('Set Tag'){
      when { branch 'main' }
      steps {
        script {
          if (params.FORCE_TAG?.trim()) {
            env.TAG = params.FORCE_TAG.trim()
            echo "Using forced tag: ${env.TAG}"
          } else {
            env.TAG = "v0.1.${env.BUILD_NUMBER}"
            echo "Using auto-generated tag: ${env.TAG}"
          }
        }
      }
    }

    stage('Build & Push Image'){
      when { branch 'main' }
      steps {
        echo "Building and pushing image with tag: ${env.TAG}"
        withCredentials([usernamePassword(credentialsId: env.CRED_DOCKERHUB, usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh '''
            set -euo pipefail
            
            # Login to Docker Hub
            echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
            
            # Build image
            echo "Building image: $DOCKER_REPO:$TAG"
            docker build -t "$DOCKER_REPO:$TAG" app
            
            # Push image
            echo "Pushing image: $DOCKER_REPO:$TAG"
            docker push "$DOCKER_REPO:$TAG"
            
            # Cleanup
            docker logout
            echo "Successfully built and pushed $DOCKER_REPO:$TAG"
          '''
        }
      }
    }

    stage('Bump Helm image.tag'){
      when { branch 'main' }
      steps {
        sh '''
          set -euo pipefail
          echo "Updating Helm values file with tag: $TAG"
          
          # Create backup
          cp "$VALUES_FILE" "$VALUES_FILE.backup"
          
          # Update using yq (now guaranteed to be installed)
          yq eval '.image.tag = env(TAG)' -i "$VALUES_FILE"
          
          echo "==== Updated values file snippet ===="
          grep -nE '^[[:space:]]*image:|^[[:space:]]*tag:' "$VALUES_FILE" | head -10
          
          echo "==== Diff from backup ===="
          diff "$VALUES_FILE.backup" "$VALUES_FILE" || true
        '''
      }
    }

    stage('Commit & Push to GitHub'){
      when { branch 'main' }
      steps {
        withCredentials([usernamePassword(credentialsId: env.CRED_GITHUB_PAT, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
          sh '''
            set -euo pipefail
            
            # Configure git for this repository only
            git config user.name  "Jenkins CI"
            git config user.email "ci@jenkins.local"
            
            # Check if there are changes to commit
            if git diff --quiet "$VALUES_FILE"; then
              echo "No changes to commit in $VALUES_FILE"
              exit 0
            fi
            
            # Add and commit changes
            git add "$VALUES_FILE"
            git commit -m "ci: bump image tag to $TAG [skip ci]"
            
            # Configure remote for GitHub
            git remote set-url origin "https://${GH_USER}:${GH_PAT}@github.com/ofirjean/mental_health_assistant.git"
            
            # Push changes
            BRANCH="${BRANCH_NAME}"
            echo "Pushing to GitHub branch: $BRANCH"
            git push origin "HEAD:${BRANCH}"
            
            # Create and push tag
            echo "Creating and pushing tag: $TAG"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "refs/tags/$TAG"
            
            echo "Successfully pushed changes and tag to GitHub"
          '''
        }
      }
    }

    stage('Mirror to GitLab'){
      when { branch 'main' }
      steps {
        withCredentials([usernamePassword(credentialsId: env.CRED_GITLAB_PAT, usernameVariable: 'GL_USER', passwordVariable: 'GL_PAT')]) {
          sh '''
            set -euo pipefail
            
            # Remove existing gitlab remote if it exists
            git remote remove gitlab 2>/dev/null || true
            
            # Add GitLab remote
            git remote add gitlab "https://${GL_USER}:${GL_PAT}@gitlab.com/sela-tracks/1116/students/ofir/final-project.git"
            
            # Push branch and tag to GitLab
            BRANCH="${BRANCH_NAME}"
            echo "Mirroring to GitLab branch: $BRANCH"
            git push gitlab "HEAD:${BRANCH}"
            
            echo "Pushing tag to GitLab: $TAG"
            git push gitlab "refs/tags/$TAG"
            
            echo "Successfully mirrored to GitLab"
          '''
        }
      }
    }
  }

  post {
    success { 
      script {
        if (env.TAG) {
          echo "✅ Successfully built & pushed ${env.DOCKER_REPO}:${env.TAG}"
        } else {
          echo "✅ Pipeline completed successfully"
        }
      }
    }
    failure { 
      echo "❌ Build failed on branch ${env.BRANCH_NAME ?: 'unknown'}"
    }
    always {
      script {
        try { 
          cleanWs deleteDirs: true, notFailBuild: true 
        } catch (Exception err) { 
          echo "⚠️  Workspace cleanup skipped: ${err.message}"
        }
      }
    }
  }
}