{{- if .Values.sanityCheck.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mha.fullname" . }}-sanity
  labels:
    app.kubernetes.io/name: {{ include "mha.name" . }}
    helm.sh/chart: {{ include "mha.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mha.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      containers:
        - name: sanity
          image: {{ .Values.sanityCheck.image }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-lc"]
          args:
            - >
              set -e;
              URL="http://{{ include "mha.fullname" . }}:{{ .Values.service.port }}{{ .Values.sanityCheck.path }}";
              echo "Sanity check hitting $URL";
              for i in $(seq 1 {{ .Values.sanityCheck.retries }});
              do
                code=$(curl -m {{ .Values.sanityCheck.timeoutSeconds }} -sS -o /tmp/resp -w "%{http_code}" "$$URL" || true);
                if [ "$$code" = "200" ] && grep -Eq {{ .Values.sanityCheck.expectedRegex | quote }} /tmp/resp; then
                  echo "Sanity OK (HTTP 200 + body matched)"; exit 0;
                fi;
                echo "Not ready yet (attempt $$i/{{ .Values.sanityCheck.retries }}), code=$$code";
                sleep {{ .Values.sanityCheck.backoffSeconds }};
              done;
              echo "Sanity FAILED. Last response:"; cat /tmp/resp || true; exit 1;
{{- end }}
